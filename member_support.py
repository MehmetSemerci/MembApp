#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 15, 2018 05:51:30 AM


import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


from tkinter import messagebox

import MySQLdb
#dataBase connection
db = MySQLdb.connect(host='35.204.26.147',user='root',passwd='ieee2018',db='ieee_uye')

cur = db.cursor()

def set_Tk_var():
    global txtLoginSchoolID
    txtLoginSchoolID = StringVar()
    global txtLoginPassword
    txtLoginPassword = StringVar()
    global txtAddUID
    txtAddUID = StringVar()
    global txtAddName
    txtAddName = StringVar()
    global txtAddSurname
    txtAddSurname = StringVar()
    global txtAddSchoolID
    txtAddSchoolID = StringVar()
    global txtAddPhone
    txtAddPhone = StringVar()
    global txtLabelAddInfo
    txtLabelAddInfo = StringVar()
    global txtEditNum
    txtEditNum = StringVar()
    global txtEditUID
    txtEditUID = StringVar()
    global txtEditName
    txtEditName = StringVar()
    global txtEditSurname
    txtEditSurname = StringVar()
    global txtEditSchoolID
    txtEditSchoolID = StringVar()
    global txtEditPhone
    txtEditPhone = StringVar()
    global editCheck
    editCheck = StringVar()
    global txtLabelEditInfo
    txtLabelEditInfo = StringVar()
    global txtCreateEventName
    txtCreateEventName = StringVar()
    global txtCreateSociety
    txtCreateSociety = StringVar()
    global txtCreateDate
    txtCreateDate = StringVar()
    global txtLabelCreateInfo
    txtLabelCreateInfo = StringVar()
    global combobox
    combobox = StringVar()
    global txtAttendanceInfo
    txtAttendanceInfo = StringVar()

def buttonAddReturn(p1):
    print('member_support.buttonAddReturn')
    sys.stdout.flush()

def loginButtonReturn(p1):
    if(txtLoginSchoolID.get()=="" or txtLoginPassword.get()==""):
        if(txtLoginSchoolID.get()==""):
            messagebox.showwarning("Empty School ID","Enter a School ID")
        else:
            messagebox.showwarning("Empty Password","Enter a password")
    if(txtLoginSchoolID.get()!=""):
        command = "SELECT * FROM userList WHERE schoolID ="+txtLoginSchoolID.get()+";"
        cur.execute(command)
        results = cur.fetchall()
        if(results!=()):
            for row in results:
                schoolID = row[0]
                name = row[1]
                surname = row[2]
                password = row[3]
                admin = row[4]
            if (txtLoginPassword.get()==password):
                if(admin==b'\x01'):
                    messagebox.showinfo("Admin Login","Welcome "+name+" "+surname)
                    w.frameLogin.pack()
                    w.menubar.entryconfigure("Member Operations",state="normal")
                    w.menubar.entryconfigure("Event Operations",state="normal")
                    w.menubar.entryconfig("Change Password",state="normal")

                else:
                    messagebox.showinfo("User Login","Welcome "+name+" "+surname)
                    w.frameLogin.pack()
                    w.menubar.entryconfig("Change Password",state="normal")
            else:
                if(txtLoginPassword.get()!=""):
                    messagebox.showwarning("Wrong","Wrong Password")
        else:
            messagebox.showwarning("Not found!","User not found")

def pushLoginButton():
    if(txtLoginSchoolID.get()=="" or txtLoginPassword.get()==""):
        if(txtLoginSchoolID.get()==""):
            messagebox.showwarning("Empty School ID","Enter a School ID")
        else:
            messagebox.showwarning("Empty Password","Enter a password")
    if(txtLoginSchoolID.get()!=""):
        command = "SELECT * FROM userList WHERE schoolID ="+txtLoginSchoolID.get()+";"
        cur.execute(command)
        results = cur.fetchall()
        if(results!=()):
            for row in results:
                schoolID = row[0]
                name = row[1]
                surname = row[2]
                password = row[3]
                admin = row[4]
            if (txtLoginPassword.get()==password):
                if(admin==b'\x01'):
                    messagebox.showinfo("Admin Login","Welcome "+name+" "+surname)
                    w.frameLogin.pack()
                    w.menubar.entryconfigure("Member Operations",state="normal")
                    w.menubar.entryconfigure("Event Operations",state="normal")
                    w.menubar.entryconfig("Change Password",state="normal")

                else:
                    messagebox.showinfo("User Login","Welcome "+name+" "+surname)
                    w.frameLogin.pack()
                    w.menubar.entryconfig("Change Password",state="normal")
            else:
                if(txtLoginPassword.get()!=""):
                    messagebox.showwarning("Wrong","Wrong Password")
        else:
            messagebox.showwarning("Not found!","User not found")


def addUIDReturn(p1):
    command = "SELECT * FROM memberList WHERE UID ="+txtAddUID.get()+";"
    cur.execute(command)
    results = cur.fetchall()
    if(results!=()):
        for row in results:
                schoolID = row[0]
                name = row[1]
                surname = row[2]
                password = row[3]
                admin = row[4]
        messagebox.showwarning("Member Already Registered!",name+surname+" is already on the list!")
        txtAddUID.set("")
        w.TEntry3.focus()
    else:
        w.TEntry4.focus()
    



def pushAddMember():
    w.frameAddMember.place(relx=-0.01, rely=-0.02, relheight=1.05, relwidth=1.01)
    w.TEntry3.focus()
    w.menubar.entryconfigure("Member Operations",state="disabled")
    w.menubar.entryconfigure("Event Operations",state="disabled")
    w.menubar.entryconfig("Change Password",state="disabled")
    w.menubar.entryconfig("Main Menu",state="normal")
    txtAddPhone.set("")
    txtAddName.set("")
    txtAddSchoolID.set("")
    txtAddUID.set("")
    txtAddSurname.set("")


def pushAttendanceOK():
    print('member_support.pushAttendanceOK')
    sys.stdout.flush()

def pushChangePassword():
    print('member_support.pushChangePassword')
    sys.stdout.flush()

def pushCreateEvent():
    print('member_support.pushCreateEvent')
    sys.stdout.flush()

def pushEditCheck():
    print('member_support.pushEditCheck')
    sys.stdout.flush()

def pushEditMember():
    print('member_support.pushEditMember')
    sys.stdout.flush()

def pushEditRemove():
    print('member_support.pushEditRemove')
    sys.stdout.flush()

def pushEditSave():
    print('member_support.pushEditSave')
    sys.stdout.flush()

def pushEventList():
    print('member_support.pushEventList')
    sys.stdout.flush()

def pushAddMemberButton():
    adder = txtAddUID.get()+", '"+txtAddName.get()+"', '"+txtAddSurname.get()+"', "+txtAddSchoolID.get()+", '"+txtAddPhone.get()
    command = "SELECT * FROM memberList WHERE UID ="+txtAddUID.get()+";"
    cur.execute(command)
    results = cur.fetchall()
    if(results!=()):
        for row in results:
                schoolID = row[0]
                name = row[1]
                surname = row[2]
                password = row[3]
                admin = row[4]
        messagebox.showwarning("Member Already Registered!",name+" "+surname+" is already on the list!")
        txtAddUID.set("")
        txtAddName.set("")
        txtAddPhone.set("")
        txtAddSurname.set("")
        txtAddSchoolID.set("")
        w.TEntry3.focus()
    else:
        command = "INSERT INTO memberList (UID, name, surname, schoolID, phone) VALUES ("+adder+"');"
        print(command)
        cur.execute(command)
        db.commit()
        command="SELECT * FROM memberList WHERE UID ="+txtAddUID.get()+";"
        cur.execute(command)
        results = cur.fetchall()
        if(results!=()):
            for row in results:
                    UID = row[0]
                    name = row[1]
                    surname = row[2]
                    schoolID = row[3]
            messagebox.showinfo("Success!",UID+" "+name+" "+surname)
        else:
            messagebox.showerror("Error","Error not added!")
    txtAddName.set("")
    txtAddPhone.set("")
    txtAddSchoolID.set("")
    txtAddSurname.set("")
    txtAddUID.set("")
    w.TEntry3.focus()


def pushLogout():
    w.frameLogin.place(relx=-0.01, rely=-0.02, relheight=1.05, relwidth=1.01)
    txtLoginSchoolID.set("")
    txtLoginPassword.set("")
    w.menubar.entryconfigure("Member Operations",state="disabled")
    w.menubar.entryconfigure("Event Operations",state="disabled")
    w.menubar.entryconfig("Change Password",state="disabled")
    w.menubar.entryconfig("Main Menu",state="disabled")


def pushMainMenu():
    w.frameLogin.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.frameAddMember.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.frameAttendance.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.frameCreateEvent.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.frameEditMember.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.framePassword.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.frameTakeAttend.place(relx=-0.01, rely=-0.02, relheight=0, relwidth=0)
    w.menubar.entryconfigure("Member Operations",state="normal")
    w.menubar.entryconfigure("Event Operations",state="normal")
    w.menubar.entryconfig("Change Password",state="normal")
    w.menubar.entryconfig("Main Menu",state="disabled")


def pushMemberList():
    print('member_support.pushMemberList')
    sys.stdout.flush()

def pushSavePassword():
    print('member_support.pushSavePassword')
    sys.stdout.flush()

def pushTakeAttend():
    print('member_support.pushTakeAttend')
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import member
    member.vp_start_gui()


